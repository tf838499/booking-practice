// Code generated by MockGen. DO NOT EDIT.
// Source: ticket-booking/internal/app/service/customers (interfaces: CustomerRedis)

// Package automock is a generated GoMock package.
package automock

import (
	context "context"
	reflect "reflect"
	RedisCache "ticket-booking/internal/adapter/redisClient"
	PostgresDB "ticket-booking/internal/adapter/repository/pgDB"

	gomock "github.com/golang/mock/gomock"
)

// MockCustomerRedis is a mock of CustomerRedis interface.
type MockCustomerRedis struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerRedisMockRecorder
}

// MockCustomerRedisMockRecorder is the mock recorder for MockCustomerRedis.
type MockCustomerRedisMockRecorder struct {
	mock *MockCustomerRedis
}

// NewMockCustomerRedis creates a new mock instance.
func NewMockCustomerRedis(ctrl *gomock.Controller) *MockCustomerRedis {
	mock := &MockCustomerRedis{ctrl: ctrl}
	mock.recorder = &MockCustomerRedisMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerRedis) EXPECT() *MockCustomerRedisMockRecorder {
	return m.recorder
}

// DelOrderTradeNo mocks base method.
func (m *MockCustomerRedis) DelOrderTradeNo(arg0 context.Context, arg1 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelOrderTradeNo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelOrderTradeNo indicates an expected call of DelOrderTradeNo.
func (mr *MockCustomerRedisMockRecorder) DelOrderTradeNo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelOrderTradeNo", reflect.TypeOf((*MockCustomerRedis)(nil).DelOrderTradeNo), arg0, arg1)
}

// DelSeatKey mocks base method.
func (m *MockCustomerRedis) DelSeatKey(arg0 context.Context, arg1 RedisCache.SeatKeyParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelSeatKey", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelSeatKey indicates an expected call of DelSeatKey.
func (mr *MockCustomerRedisMockRecorder) DelSeatKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelSeatKey", reflect.TypeOf((*MockCustomerRedis)(nil).DelSeatKey), arg0, arg1)
}

// DelSeatValue mocks base method.
func (m *MockCustomerRedis) DelSeatValue(arg0 context.Context, arg1 []PostgresDB.Seat) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelSeatValue", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelSeatValue indicates an expected call of DelSeatValue.
func (mr *MockCustomerRedisMockRecorder) DelSeatValue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelSeatValue", reflect.TypeOf((*MockCustomerRedis)(nil).DelSeatValue), arg0, arg1)
}

// GetOrderTradeNoExist mocks base method.
func (m *MockCustomerRedis) GetOrderTradeNoExist(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderTradeNoExist", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderTradeNoExist indicates an expected call of GetOrderTradeNoExist.
func (mr *MockCustomerRedisMockRecorder) GetOrderTradeNoExist(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderTradeNoExist", reflect.TypeOf((*MockCustomerRedis)(nil).GetOrderTradeNoExist), arg0, arg1)
}

// GetOrderTradeNoList mocks base method.
func (m *MockCustomerRedis) GetOrderTradeNoList(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderTradeNoList", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderTradeNoList indicates an expected call of GetOrderTradeNoList.
func (mr *MockCustomerRedisMockRecorder) GetOrderTradeNoList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderTradeNoList", reflect.TypeOf((*MockCustomerRedis)(nil).GetOrderTradeNoList), arg0)
}

// SetOrderTradeNo mocks base method.
func (m *MockCustomerRedis) SetOrderTradeNo(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOrderTradeNo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOrderTradeNo indicates an expected call of SetOrderTradeNo.
func (mr *MockCustomerRedisMockRecorder) SetOrderTradeNo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOrderTradeNo", reflect.TypeOf((*MockCustomerRedis)(nil).SetOrderTradeNo), arg0, arg1)
}

// SetSeatAndIncrSeatNumber mocks base method.
func (m *MockCustomerRedis) SetSeatAndIncrSeatNumber(arg0 context.Context, arg1 []string, arg2 []PostgresDB.Seat) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSeatAndIncrSeatNumber", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSeatAndIncrSeatNumber indicates an expected call of SetSeatAndIncrSeatNumber.
func (mr *MockCustomerRedisMockRecorder) SetSeatAndIncrSeatNumber(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSeatAndIncrSeatNumber", reflect.TypeOf((*MockCustomerRedis)(nil).SetSeatAndIncrSeatNumber), arg0, arg1, arg2)
}

// SetSeatKey mocks base method.
func (m *MockCustomerRedis) SetSeatKey(arg0 context.Context, arg1 RedisCache.SeatKeyParams) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSeatKey", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetSeatKey indicates an expected call of SetSeatKey.
func (mr *MockCustomerRedisMockRecorder) SetSeatKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSeatKey", reflect.TypeOf((*MockCustomerRedis)(nil).SetSeatKey), arg0, arg1)
}
