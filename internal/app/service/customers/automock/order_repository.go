// Code generated by MockGen. DO NOT EDIT.
// Source: ticket-booking/internal/app/service/customers (interfaces: OrderRepository)

// Package automock is a generated GoMock package.
package automock

import (
	context "context"
	reflect "reflect"
	PostgresDB "ticket-booking/internal/adapter/repository/pgDB"

	gomock "github.com/golang/mock/gomock"
)

// MockOrderRepository is a mock of OrderRepository interface.
type MockOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryMockRecorder
}

// MockOrderRepositoryMockRecorder is the mock recorder for MockOrderRepository.
type MockOrderRepositoryMockRecorder struct {
	mock *MockOrderRepository
}

// NewMockOrderRepository creates a new mock instance.
func NewMockOrderRepository(ctrl *gomock.Controller) *MockOrderRepository {
	mock := &MockOrderRepository{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepository) EXPECT() *MockOrderRepositoryMockRecorder {
	return m.recorder
}

// CreateOrderAndSetSeatIsSoldTx mocks base method.
func (m *MockOrderRepository) CreateOrderAndSetSeatIsSoldTx(arg0 context.Context, arg1 PostgresDB.CreateOrderAndSetSeatIsSoldParams) ([]PostgresDB.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderAndSetSeatIsSoldTx", arg0, arg1)
	ret0, _ := ret[0].([]PostgresDB.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrderAndSetSeatIsSoldTx indicates an expected call of CreateOrderAndSetSeatIsSoldTx.
func (mr *MockOrderRepositoryMockRecorder) CreateOrderAndSetSeatIsSoldTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderAndSetSeatIsSoldTx", reflect.TypeOf((*MockOrderRepository)(nil).CreateOrderAndSetSeatIsSoldTx), arg0, arg1)
}

// DeletTicketAndUpdateSeatIsAvailableStatusTx mocks base method.
func (m *MockOrderRepository) DeletTicketAndUpdateSeatIsAvailableStatusTx(arg0 context.Context, arg1 string, arg2 bool) ([]PostgresDB.Seat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletTicketAndUpdateSeatIsAvailableStatusTx", arg0, arg1, arg2)
	ret0, _ := ret[0].([]PostgresDB.Seat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletTicketAndUpdateSeatIsAvailableStatusTx indicates an expected call of DeletTicketAndUpdateSeatIsAvailableStatusTx.
func (mr *MockOrderRepositoryMockRecorder) DeletTicketAndUpdateSeatIsAvailableStatusTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletTicketAndUpdateSeatIsAvailableStatusTx", reflect.TypeOf((*MockOrderRepository)(nil).DeletTicketAndUpdateSeatIsAvailableStatusTx), arg0, arg1, arg2)
}

// SelectSeatsListAndUpdateSeatStatusTx mocks base method.
func (m *MockOrderRepository) SelectSeatsListAndUpdateSeatStatusTx(arg0 context.Context, arg1 PostgresDB.SelectSeatsListByEventAndSectionParams) ([]PostgresDB.Seat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectSeatsListAndUpdateSeatStatusTx", arg0, arg1)
	ret0, _ := ret[0].([]PostgresDB.Seat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectSeatsListAndUpdateSeatStatusTx indicates an expected call of SelectSeatsListAndUpdateSeatStatusTx.
func (mr *MockOrderRepositoryMockRecorder) SelectSeatsListAndUpdateSeatStatusTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectSeatsListAndUpdateSeatStatusTx", reflect.TypeOf((*MockOrderRepository)(nil).SelectSeatsListAndUpdateSeatStatusTx), arg0, arg1)
}

// UpdateSeatStatusByOrderTradeNo mocks base method.
func (m *MockOrderRepository) UpdateSeatStatusByOrderTradeNo(arg0 context.Context, arg1 PostgresDB.UpdateSeatStatusByOrderTradeNoParams) ([]PostgresDB.Seat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSeatStatusByOrderTradeNo", arg0, arg1)
	ret0, _ := ret[0].([]PostgresDB.Seat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSeatStatusByOrderTradeNo indicates an expected call of UpdateSeatStatusByOrderTradeNo.
func (mr *MockOrderRepositoryMockRecorder) UpdateSeatStatusByOrderTradeNo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSeatStatusByOrderTradeNo", reflect.TypeOf((*MockOrderRepository)(nil).UpdateSeatStatusByOrderTradeNo), arg0, arg1)
}

// UpdateSeatStatusBySeatIDs mocks base method.
func (m *MockOrderRepository) UpdateSeatStatusBySeatIDs(arg0 context.Context, arg1 PostgresDB.UpdateSeatStatusBySeatIDsParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSeatStatusBySeatIDs", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSeatStatusBySeatIDs indicates an expected call of UpdateSeatStatusBySeatIDs.
func (mr *MockOrderRepositoryMockRecorder) UpdateSeatStatusBySeatIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSeatStatusBySeatIDs", reflect.TypeOf((*MockOrderRepository)(nil).UpdateSeatStatusBySeatIDs), arg0, arg1)
}

// UpdateTicketStatus mocks base method.
func (m *MockOrderRepository) UpdateTicketStatus(arg0 context.Context, arg1 PostgresDB.UpdateTicketStatusParams) ([]PostgresDB.UpdateTicketStatusRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTicketStatus", arg0, arg1)
	ret0, _ := ret[0].([]PostgresDB.UpdateTicketStatusRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTicketStatus indicates an expected call of UpdateTicketStatus.
func (mr *MockOrderRepositoryMockRecorder) UpdateTicketStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTicketStatus", reflect.TypeOf((*MockOrderRepository)(nil).UpdateTicketStatus), arg0, arg1)
}
