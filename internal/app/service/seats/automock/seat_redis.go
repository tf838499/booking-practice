// Code generated by MockGen. DO NOT EDIT.
// Source: ticket-booking/internal/app/service/seats (interfaces: SeatRedis)

// Package automock is a generated GoMock package.
package automock

import (
	context "context"
	reflect "reflect"
	RedisCache "ticket-booking/internal/adapter/redisClient"
	PostgresDB "ticket-booking/internal/adapter/repository/pgDB"

	gomock "github.com/golang/mock/gomock"
)

// MockSeatRedis is a mock of SeatRedis interface.
type MockSeatRedis struct {
	ctrl     *gomock.Controller
	recorder *MockSeatRedisMockRecorder
}

// MockSeatRedisMockRecorder is the mock recorder for MockSeatRedis.
type MockSeatRedisMockRecorder struct {
	mock *MockSeatRedis
}

// NewMockSeatRedis creates a new mock instance.
func NewMockSeatRedis(ctrl *gomock.Controller) *MockSeatRedis {
	mock := &MockSeatRedis{ctrl: ctrl}
	mock.recorder = &MockSeatRedisMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSeatRedis) EXPECT() *MockSeatRedisMockRecorder {
	return m.recorder
}

// FlushAll mocks base method.
func (m *MockSeatRedis) FlushAll(arg0 context.Context, arg1 RedisCache.DelSeatParams) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FlushAll", arg0, arg1)
}

// FlushAll indicates an expected call of FlushAll.
func (mr *MockSeatRedisMockRecorder) FlushAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushAll", reflect.TypeOf((*MockSeatRedis)(nil).FlushAll), arg0, arg1)
}

// GetSeatValue mocks base method.
func (m *MockSeatRedis) GetSeatValue(arg0 context.Context, arg1 RedisCache.GetSeatParams) ([]PostgresDB.Seat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSeatValue", arg0, arg1)
	ret0, _ := ret[0].([]PostgresDB.Seat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSeatValue indicates an expected call of GetSeatValue.
func (mr *MockSeatRedisMockRecorder) GetSeatValue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeatValue", reflect.TypeOf((*MockSeatRedis)(nil).GetSeatValue), arg0, arg1)
}

// GetSectionSeatCount mocks base method.
func (m *MockSeatRedis) GetSectionSeatCount(arg0 context.Context, arg1 RedisCache.GetSectionSeatCount) (map[string]int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSectionSeatCount", arg0, arg1)
	ret0, _ := ret[0].(map[string]int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSectionSeatCount indicates an expected call of GetSectionSeatCount.
func (mr *MockSeatRedisMockRecorder) GetSectionSeatCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSectionSeatCount", reflect.TypeOf((*MockSeatRedis)(nil).GetSectionSeatCount), arg0, arg1)
}

// GetSectionsAndPricesByEventID mocks base method.
func (m *MockSeatRedis) GetSectionsAndPricesByEventID(arg0 context.Context, arg1 int32) ([]PostgresDB.SelectSectionsAndPricesByEventIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSectionsAndPricesByEventID", arg0, arg1)
	ret0, _ := ret[0].([]PostgresDB.SelectSectionsAndPricesByEventIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSectionsAndPricesByEventID indicates an expected call of GetSectionsAndPricesByEventID.
func (mr *MockSeatRedisMockRecorder) GetSectionsAndPricesByEventID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSectionsAndPricesByEventID", reflect.TypeOf((*MockSeatRedis)(nil).GetSectionsAndPricesByEventID), arg0, arg1)
}

// GetSectionsPricesBySectionsName mocks base method.
func (m *MockSeatRedis) GetSectionsPricesBySectionsName(arg0 context.Context, arg1 int32, arg2 string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSectionsPricesBySectionsName", arg0, arg1, arg2)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSectionsPricesBySectionsName indicates an expected call of GetSectionsPricesBySectionsName.
func (mr *MockSeatRedisMockRecorder) GetSectionsPricesBySectionsName(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSectionsPricesBySectionsName", reflect.TypeOf((*MockSeatRedis)(nil).GetSectionsPricesBySectionsName), arg0, arg1, arg2)
}

// SetSeatValueAndSectionAndIncrSeatNumber mocks base method.
func (m *MockSeatRedis) SetSeatValueAndSectionAndIncrSeatNumber(arg0 context.Context, arg1 []string, arg2 []float64, arg3 []PostgresDB.Seat) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSeatValueAndSectionAndIncrSeatNumber", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSeatValueAndSectionAndIncrSeatNumber indicates an expected call of SetSeatValueAndSectionAndIncrSeatNumber.
func (mr *MockSeatRedisMockRecorder) SetSeatValueAndSectionAndIncrSeatNumber(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSeatValueAndSectionAndIncrSeatNumber", reflect.TypeOf((*MockSeatRedis)(nil).SetSeatValueAndSectionAndIncrSeatNumber), arg0, arg1, arg2, arg3)
}
