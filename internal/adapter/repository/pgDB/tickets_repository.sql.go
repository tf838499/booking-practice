// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: tickets_repository.sql

package PostgresDB

import (
	"context"
	"time"

	"github.com/lib/pq"
)

const createOrder = `-- name: CreateOrder :one
WITH seat_check AS (
  SELECT id FROM seats
  WHERE id = $3 
)
INSERT INTO tickets (
  consumer_id, event_id, seat_id, ticket_status, order_trade_no
)
SELECT
  $1, $2, $3, $4, $5
FROM seat_check
RETURNING id, consumer_id, event_id, seat_id, order_trade_no, purchase_date, ticket_status
`

type CreateOrderParams struct {
	ConsumerID   int32  `json:"consumer_id"`
	EventID      int32  `json:"event_id"`
	SeatID       int32  `json:"seat_id"`
	TicketStatus int32  `json:"ticket_status"`
	OrderTradeNo string `json:"order_trade_no"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Ticket, error) {
	row := q.db.QueryRowContext(ctx, createOrder,
		arg.ConsumerID,
		arg.EventID,
		arg.SeatID,
		arg.TicketStatus,
		arg.OrderTradeNo,
	)
	var i Ticket
	err := row.Scan(
		&i.ID,
		&i.ConsumerID,
		&i.EventID,
		&i.SeatID,
		&i.OrderTradeNo,
		&i.PurchaseDate,
		&i.TicketStatus,
	)
	return i, err
}

const deleteTicketsByOrderTradeNo = `-- name: DeleteTicketsByOrderTradeNo :exec
DELETE FROM tickets
WHERE order_trade_no = $1
RETURNING id, consumer_id, event_id, seat_id, order_trade_no, purchase_date, ticket_status
`

func (q *Queries) DeleteTicketsByOrderTradeNo(ctx context.Context, orderTradeNo string) error {
	_, err := q.db.ExecContext(ctx, deleteTicketsByOrderTradeNo, orderTradeNo)
	return err
}

const selectSeat = `-- name: SelectSeat :one
SELECT id, section, seat_number, seat_status, price, event_id FROM seats WhERE id = $1
`

func (q *Queries) SelectSeat(ctx context.Context, id int32) (Seat, error) {
	row := q.db.QueryRowContext(ctx, selectSeat, id)
	var i Seat
	err := row.Scan(
		&i.ID,
		&i.Section,
		&i.SeatNumber,
		&i.SeatStatus,
		&i.Price,
		&i.EventID,
	)
	return i, err
}

const selectSeatsListByEventAndSection = `-- name: SelectSeatsListByEventAndSection :many
SELECT id, section, seat_number, seat_status, price, event_id 
FROM seats 
WHERE event_id = $1 
  AND section = $2
  AND seat_number = ANY($3::int[])
  FOR UPDATE
`

type SelectSeatsListByEventAndSectionParams struct {
	EventID int32   `json:"event_id"`
	Section string  `json:"section"`
	Column3 []int32 `json:"column_3"`
}

func (q *Queries) SelectSeatsListByEventAndSection(ctx context.Context, arg SelectSeatsListByEventAndSectionParams) ([]Seat, error) {
	rows, err := q.db.QueryContext(ctx, selectSeatsListByEventAndSection, arg.EventID, arg.Section, pq.Array(arg.Column3))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Seat{}
	for rows.Next() {
		var i Seat
		if err := rows.Scan(
			&i.ID,
			&i.Section,
			&i.SeatNumber,
			&i.SeatStatus,
			&i.Price,
			&i.EventID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectSectionsAndPricesByEventID = `-- name: SelectSectionsAndPricesByEventID :many

SELECT section, price 
FROM (
    SELECT DISTINCT ON (section, price) section, price, id 
    FROM seats 
    WHERE event_id = $1
    ORDER BY section, price, id
) AS distinct_seats
ORDER BY id
`

type SelectSectionsAndPricesByEventIDRow struct {
	Section string  `json:"section"`
	Price   float64 `json:"price"`
}

// -- name: UpdateTicketStatus :many
// UPDATE tickets SET ticket_status = $2
// WHERE order_trade_no = $1 RETURNING *;
func (q *Queries) SelectSectionsAndPricesByEventID(ctx context.Context, eventID int32) ([]SelectSectionsAndPricesByEventIDRow, error) {
	rows, err := q.db.QueryContext(ctx, selectSectionsAndPricesByEventID, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SelectSectionsAndPricesByEventIDRow{}
	for rows.Next() {
		var i SelectSectionsAndPricesByEventIDRow
		if err := rows.Scan(&i.Section, &i.Price); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectTicketListByOrderTradeNo = `-- name: SelectTicketListByOrderTradeNo :many
SELECT id, consumer_id, event_id, seat_id, order_trade_no, purchase_date, ticket_status FROM tickets WhERE order_trade_no = $1
`

func (q *Queries) SelectTicketListByOrderTradeNo(ctx context.Context, orderTradeNo string) ([]Ticket, error) {
	rows, err := q.db.QueryContext(ctx, selectTicketListByOrderTradeNo, orderTradeNo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Ticket{}
	for rows.Next() {
		var i Ticket
		if err := rows.Scan(
			&i.ID,
			&i.ConsumerID,
			&i.EventID,
			&i.SeatID,
			&i.OrderTradeNo,
			&i.PurchaseDate,
			&i.TicketStatus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSeatStatus = `-- name: UpdateSeatStatus :one
UPDATE seats
SET seat_status = $2
WHERE id = $1 AND seat_status = true
RETURNING id, section, seat_number, seat_status, price, event_id
`

type UpdateSeatStatusParams struct {
	ID         int32 `json:"id"`
	SeatStatus bool  `json:"seat_status"`
}

func (q *Queries) UpdateSeatStatus(ctx context.Context, arg UpdateSeatStatusParams) (Seat, error) {
	row := q.db.QueryRowContext(ctx, updateSeatStatus, arg.ID, arg.SeatStatus)
	var i Seat
	err := row.Scan(
		&i.ID,
		&i.Section,
		&i.SeatNumber,
		&i.SeatStatus,
		&i.Price,
		&i.EventID,
	)
	return i, err
}

const updateSeatStatusByOrderTradeNo = `-- name: UpdateSeatStatusByOrderTradeNo :many
UPDATE seats
SET seat_status = $1
WHERE id IN (
    SELECT seat_id
    FROM tickets
    WHERE order_trade_no = $2
)
RETURNING id, section, seat_number, seat_status, price, event_id
`

type UpdateSeatStatusByOrderTradeNoParams struct {
	SeatStatus   bool   `json:"seat_status"`
	OrderTradeNo string `json:"order_trade_no"`
}

func (q *Queries) UpdateSeatStatusByOrderTradeNo(ctx context.Context, arg UpdateSeatStatusByOrderTradeNoParams) ([]Seat, error) {
	rows, err := q.db.QueryContext(ctx, updateSeatStatusByOrderTradeNo, arg.SeatStatus, arg.OrderTradeNo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Seat{}
	for rows.Next() {
		var i Seat
		if err := rows.Scan(
			&i.ID,
			&i.Section,
			&i.SeatNumber,
			&i.SeatStatus,
			&i.Price,
			&i.EventID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSeatStatusBySeatIDs = `-- name: UpdateSeatStatusBySeatIDs :exec
UPDATE seats
SET seat_status = $1
WHERE id = ANY($2::int[])
`

type UpdateSeatStatusBySeatIDsParams struct {
	SeatStatus bool    `json:"seat_status"`
	Column2    []int32 `json:"column_2"`
}

func (q *Queries) UpdateSeatStatusBySeatIDs(ctx context.Context, arg UpdateSeatStatusBySeatIDsParams) error {
	_, err := q.db.ExecContext(ctx, updateSeatStatusBySeatIDs, arg.SeatStatus, pq.Array(arg.Column2))
	return err
}

const updateTicketStatus = `-- name: UpdateTicketStatus :many
WITH updated_tickets AS (
  UPDATE tickets
  SET ticket_status = $2
  WHERE order_trade_no = $1
  RETURNING id, consumer_id, event_id, seat_id, order_trade_no, purchase_date, ticket_status
) SELECT  updated_tickets.id, 
  updated_tickets.order_trade_no, 
  updated_tickets.purchase_date, 
  updated_tickets.ticket_status,
  updated_tickets.id AS consumer_id,
  consumers.email AS consumer_email,
  seats.section,
  seats.seat_number,
  seats.seat_status,
  seats.price FROM updated_tickets  
JOIN consumers  ON updated_tickets.consumer_id = consumers.id
JOIN seats  ON updated_tickets.seat_id = seats.id
`

type UpdateTicketStatusParams struct {
	OrderTradeNo string `json:"order_trade_no"`
	TicketStatus int32  `json:"ticket_status"`
}

type UpdateTicketStatusRow struct {
	ID            int32     `json:"id"`
	OrderTradeNo  string    `json:"order_trade_no"`
	PurchaseDate  time.Time `json:"purchase_date"`
	TicketStatus  int32     `json:"ticket_status"`
	ConsumerID    int32     `json:"consumer_id"`
	ConsumerEmail string    `json:"consumer_email"`
	Section       string    `json:"section"`
	SeatNumber    int32     `json:"seat_number"`
	SeatStatus    bool      `json:"seat_status"`
	Price         float64   `json:"price"`
}

func (q *Queries) UpdateTicketStatus(ctx context.Context, arg UpdateTicketStatusParams) ([]UpdateTicketStatusRow, error) {
	rows, err := q.db.QueryContext(ctx, updateTicketStatus, arg.OrderTradeNo, arg.TicketStatus)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UpdateTicketStatusRow{}
	for rows.Next() {
		var i UpdateTicketStatusRow
		if err := rows.Scan(
			&i.ID,
			&i.OrderTradeNo,
			&i.PurchaseDate,
			&i.TicketStatus,
			&i.ConsumerID,
			&i.ConsumerEmail,
			&i.Section,
			&i.SeatNumber,
			&i.SeatStatus,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
