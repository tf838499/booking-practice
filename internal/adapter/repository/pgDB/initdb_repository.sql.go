// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: initdb_repository.sql

package PostgresDB

import (
	"context"
	"time"
)

const createConsumer = `-- name: CreateConsumer :one
INSERT INTO consumers (
  name, email
) VALUES (
  $1, $2
)
RETURNING id, name, email, created_at
`

type CreateConsumerParams struct {
	Name  string `json:"name"`
	Email string `json:"email"`
}

func (q *Queries) CreateConsumer(ctx context.Context, arg CreateConsumerParams) (Consumer, error) {
	row := q.db.QueryRowContext(ctx, createConsumer, arg.Name, arg.Email)
	var i Consumer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const createEvent = `-- name: CreateEvent :one
INSERT INTO events (
  event_name, event_date, total_seats
) VALUES (
  $1, $2, $3
)
RETURNING id, event_name, event_date, total_seats
`

type CreateEventParams struct {
	EventName  string    `json:"event_name"`
	EventDate  time.Time `json:"event_date"`
	TotalSeats int32     `json:"total_seats"`
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, createEvent, arg.EventName, arg.EventDate, arg.TotalSeats)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.EventName,
		&i.EventDate,
		&i.TotalSeats,
	)
	return i, err
}

const createSeat = `-- name: CreateSeat :one
INSERT INTO seats (
  section, seat_number, seat_status, price, event_id
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, section, seat_number, seat_status, price, event_id
`

type CreateSeatParams struct {
	Section    string  `json:"section"`
	SeatNumber int32   `json:"seat_number"`
	SeatStatus bool    `json:"seat_status"`
	Price      float64 `json:"price"`
	EventID    int32   `json:"event_id"`
}

func (q *Queries) CreateSeat(ctx context.Context, arg CreateSeatParams) (Seat, error) {
	row := q.db.QueryRowContext(ctx, createSeat,
		arg.Section,
		arg.SeatNumber,
		arg.SeatStatus,
		arg.Price,
		arg.EventID,
	)
	var i Seat
	err := row.Scan(
		&i.ID,
		&i.Section,
		&i.SeatNumber,
		&i.SeatStatus,
		&i.Price,
		&i.EventID,
	)
	return i, err
}
